/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-23 05:29:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import shop.dao.UserRepository;
import shop.dto.User;

public final class join_005fpro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("shop.dto.User");
    _jspx_imports_classes.add("shop.dao.UserRepository");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- \r\n");
      out.write("	회원 가입 처리\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // 폼 데이터 수신
    String id = request.getParameter("id");
    String pw = request.getParameter("pw");
    String pw_confirm = request.getParameter("pw_confirm");
    String name = request.getParameter("name");
    String gender = request.getParameter("gender");
    String year = request.getParameter("year");
    String month = request.getParameter("month");
    String day = request.getParameter("day");
    String email = request.getParameter("email1") + "@" + request.getParameter("email2");
    String phone = request.getParameter("phone");
    String address = request.getParameter("address");
	
    // 조건 1. 아이디 : 영문 또는 한글로 시작
	char firstId = id.charAt(0);
	if (!((firstId >= 'a' && firstId <= 'z') || (firstId >= 'A' && firstId <= 'Z') || 
	      (firstId >= '가' && firstId <= '힣'))) {
	    out.println("<script>alert('아이디는 영문 또는 한글로 시작해야 합니다.'); history.back();</script>");
	    return;
	}

    // 조건 2. 비밀번호 구성요소 : 영문자, 숫자, 특수문자만 사용 가능, 특수 문자 반드시 1개 포함, 글자수 6 이상
    // 정규 표현식: 영문자, 숫자, 특수문자를 포함하며, 특수문자는 반드시 1개 이상 포함
    if(!(pw.length() >= 6)) {
    	out.println("<script>alert('비밀번호를 6자 이상 입력해주세요.'); history.back();</script>");
    	return;
    }
    if(!pw.matches("(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?])[A-Za-z0-9!@#$%^&*()_+\\-=\\[\\]{};':\",.<>\\/?]*")) {
    	out.println("<script>alert('비밀번호는 영문자, 숫자, 특수기호만 입력 가능하고, 특수 문자는 반드시 1개 이상 포함해주세요.'); history.back();</script>");
    	return;
    }
    	
    // 조건 3. 비밀번호 유효성 검사
    if (!pw.equals(pw_confirm)) {
        // 비밀번호가 일치하지 않는 경우
        out.println("<script>alert('비밀번호가 일치하지 않습니다.'); history.back();</script>");
	    return;
    } 
    
    // 조건 4. 이름은 한글만 입력
    for (int i = 0; i < name.length(); i++) {
    char ch = name.charAt(i);
	    if (ch < '가' || ch > '힣') {
	    	out.println("<script>alert('이름은 한글만 입력 가능합니다.'); history.back();</script>");
		    return;
    	}
	}
    
    
    // User 객체 생성 및 값 설정
    User user = new User();
    user.setId(id);
    user.setPassword(pw);
    user.setName(name);
    user.setGender(gender);
    user.setBirth(year + "-" + month + "-" + day);
    user.setMail(email);
    user.setPhone(phone);
    user.setAddress(address);

    // 데이터베이스 연결 및 사용자 추가 로직
    UserRepository userDAO = new UserRepository();
    int result = userDAO.insert(user);

    // 결과에 따른 응답 페이지 리다이렉션
    if (result > 0) {
        // 회원 가입 성공
        response.sendRedirect("complete.jsp?msg=1");
    } else {
        // 회원 가입 실패
        out.println("<script>alert('회원 가입 실패. 다시 시도해 주세요.'); history.back();</script>");
    }
    

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
